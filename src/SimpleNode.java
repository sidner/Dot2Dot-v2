import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {
	
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Dot2Dot parser;
  protected GraphAttr gta = new GraphAttr();
  protected static int serial = 0;
  protected int serialNumber = 0;

  public int getSerialNumber() {
	return serialNumber;
}
  
  public int getSerial() {
	return serial;
  }
  
  public SimpleNode(int i) {
    id = i;
    serial++;
    serialNumber = serial;
  }

  public SimpleNode(Dot2Dot p, int i) {
    this(i);
    parser = p;
    serial++;
    serialNumber = serial;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return Dot2DotTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
          
        }
      }
    }		
    	}
  
  
  public void insereNos(String prefix) {
	  insereNovas(prefix);
	  insereNodeIds(prefix);
  }
  public void insereNovas(String prefix) {
  	if(children != null) {
  		 for (int i = 0; i < children.length; ++i) {
  	        SimpleNode n = (SimpleNode)children[i];
  			
  	        if (n != null) {
  	        	 gta.inserirNova(n);
  	        	n.insereNovas(prefix + " ");
  	        	//System.out.println(n.id +" " n.value);
  	        }
  	      }
  	}
  	}
  	
  public void insereNodeIds(String prefix) {
	  if(children != null) {
 		 for (int i = 0; i < children.length; ++i) {
   	        SimpleNode n = (SimpleNode)children[i];
   			
   	        if (n != null) {
   	        	 gta.inserirNode_id(n);
   	        	n.insereNodeIds(prefix + " ");
   	        	//System.out.println(n.id +" " n.value);
   	        }
   	      }
  		
  	    }
  	

      }

public void checkmerdas(){
	
	//Map<Object,SimpleNode> temp= gta.getnoIds();
	//System.out.println("size= "+temp.size());
	//gta.printMapa();
	gta.printList();

}

@Override
	public boolean equals(Object obj) {
		if(obj instanceof SimpleNode) {
		  if(((SimpleNode) obj).serialNumber == serialNumber) {
			  return true;
		  }
		}
			return false;
	}

}




/* JavaCC - OriginalChecksum=746529486e61acef3db197f188440c91 (do not edit this line) */
